{"version":3,"sources":["js/05-date.js"],"names":["date1","Date","console","log","setTimeout","date2","date3","getTime","date4","date5","now","date6"],"mappings":";;;AA6EA,aA7EA,QAAA,qBAiCA,IAAMA,EAAQ,IAAIC,KAClBC,QAAQC,IAAI,QAASH,GAErBI,WAAW,WACHC,IAAAA,EAAQ,IAAIJ,KAElBC,QAAQC,IAAI,QAASH,GACrBE,QAAQC,IAAI,QAASE,GAErBH,QAAQC,IAAIE,EAAQL,IACnB,KAIH,IAAMM,GAAQ,IAAIL,MAAOM,UAEzBH,WAAW,WACHI,IAAAA,GAAQ,IAAIP,MAAOM,UAEzBL,QAAQC,IAAI,QAASG,GACrBJ,QAAQC,IAAI,QAASK,GAErBN,QAAQC,IAAIK,EAAQF,IACnB,KASH,IAAMG,EAAQR,KAAKS,MACnBR,QAAQC,IAAI,QAASM,GAErBL,WAAW,WACHO,IAAAA,EAAQV,KAAKS,MAEnBR,QAAQC,IAAI,QAASM,GACrBP,QAAQC,IAAI,QAASQ,GAErBT,QAAQC,IAAIQ,EAAQF,IACnB","file":"05-date.8f3e9916.js","sourceRoot":"../src","sourcesContent":["import '../css/common.css';\n\n// Работа с датами в JS очень проблематичная из - за разных часовых поясов, практически всегда используется какая то стороння\n// библиотека, если речь не идёт о том чтобы просто посчитать время какое то или таймер написать, как в последующих примерах.\n// На реальных проектах лучше всего [Библиотека date-fns](https://date-fns.org/)\n\n/*\n - Создание\n - Unix-время - используется для часов\n - Методы\n - Разница времени\n - Date.now()\n*/\n\n// Разберем несколько самых простых концепций:\n\n// Создание времени:\n// const date = new Date(); // встроенный в js конструктор (класс)\n// console.log(date);\n// console.dir(date); // можем увидеть кучу методов объекта\n\n// // Есть куча методов, к примеру:\n// console.log(date.getDay()); // где понедельник 1 и далее до 7\n// console.log(date.getMonth()); // где январь 0 и далее до 12\n\n// console.log(date.getTime()); // вот в таком формате, т.е. в формате Unix-время. Отсчет в секундах от 1 января 1970 00:00\n// Если указать так:\n// const date5 = new Date(1000);\n// console.log(date5); // 1000 это мсек или 1 сек\n\n// Чтобы посчитать разницу во времени:\n\n\nconst date1 = new Date(); \nconsole.log('date1', date1);\n\nsetTimeout(() => {\n  const date2 = new Date();\n\n  console.log('date1', date1);\n  console.log('date2', date2);\n\n  console.log(date2 - date1);\n}, 3000);\n\n// Можно ещё и так:\n\nconst date3 = new Date().getTime(); \n\nsetTimeout(() => {\n  const date4 = new Date().getTime();\n\n  console.log('date3', date3);\n  console.log('date4', date4);\n\n  console.log(date4 - date3);\n}, 3000);\n\n// Проблема такого подхода в том, что для таких элементарных записей создаются целые объекты Date.now(), а таких обращений\n// ко времени у нас может быть очень много, соответственно получается что мы забъем память множеством объектов и если\n// далее к этим объектам нет обращений, то сборщик мусора почистит пямять. Короче это может ударить по производительности.\n\n// В итоге если нам необходимо просто получить значение времени как число, для этого есть статический метод Date.now(), этот\n// метод не создает экземпляр, он просто возвращает текущее значение времени в мсек:\n\nconst date5 = Date.now(); \nconsole.log('date5', date5);\n\nsetTimeout(() => {\n  const date6 = Date.now();\n\n  console.log('date5', date5);\n  console.log('date6', date6);\n\n  console.log(date6 - date5);\n}, 3000);\n\n// Разницы в результате никакого, но это очень сильно облегчает память"]}