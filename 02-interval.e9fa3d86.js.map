{"version":3,"sources":["js/02-interval.js"],"names":["logger","time","console","log","Date","now","setInterval"],"mappings":";;;AA6BA,aA7BA,QAAA,qBAQA,IAAMA,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAkBF,cAAAA,OAAAA,EAAYG,SAAAA,OAAAA,KAAKC,SAElEH,QAAQC,IAAI,yBACZG,YAAYN,EAAQ,IAAM,KAC1BE,QAAQC,IAAI","file":"02-interval.e9fa3d86.js","sourceRoot":"../src","sourcesContent":["import '../css/common.css';\n\n// Если функцию необходимо вызвать не один раз, то на помощь приходит setInterval (см.далее)\n\n/*\n * Метод setInterval(callback, delay, args)\n */\n\nconst logger = time => console.log(`Лог каждые ${time}ms - ${Date.now()}`);\n\nconsole.log('До вызова setInterval');\nsetInterval(logger, 2000, 2000);\nconsole.log('После вызова setInterval');\n\n// setInterval запланирует вызов функции logger, каждые 2 секунды, и пока не отменишь этот интервал, то каждые 2000 мс\n// будет вызваться функция logger\n\n// Для того чтобы очистить наш setInterval, по аналогии с clearTimeout, у нас есть clearInterval():\n\n/*\n * Очистка интервала с clearInterval(intervalId)\n */\n\n// const intervalId = setInterval(logger, 2000, 2000);\n// const shouldCancelInterval = Math.random() > 0.3;\n// console.log(shouldCancelInterval);\n\n// if (shouldCancelInterval) {\n//   clearInterval(intervalId);\n// }\n"]}