{"version":3,"sources":["js/03-notification.js"],"names":["NOTIFICATION_DELAY","timeoutId","refs","notification","document","querySelector","onNotificationClick","hideNotification","clearTimeout","showNotification","classList","add","setTimeout","console","log","remove","addEventListener"],"mappings":";;;AAyIC,aAzID,QAAA,qBAyGA,IAAMA,EAAqB,IACvBC,EAAY,KAGVC,EAAO,CACXC,aAAcC,SAASC,cAAc,cAWvC,SAASC,IACPC,IACAC,aAAaP,GAGf,SAASQ,IACPP,EAAKC,aAAaO,UAAUC,IAAI,cAEhCV,EAAYW,WAAW,WACrBC,QAAQC,IAAI,gDACZP,KACCP,GAGL,SAASO,IACPL,EAAKC,aAAaO,UAAUK,OAAO,cAtBrCb,EAAKC,aAAaa,iBAAiB,QAASV,GAE5CG","file":"03-notification.e9917841.js","sourceRoot":"../src","sourcesContent":["import '../css/common.css';\n\n/**\n * - Показываем и скрываем добавляя/удаляя класс is-visible\n * - Скрываем через определённое время\n * - Скрываем при клике\n * - Не забываем чистить таймер\n */\n\n// Нам необходимо реализовать нотификацию(точнее уже реализована, необходимо расширить функционал), которая после выполнения \n// будет автоматически скрываться через заданное кол-во времени:\n\n// Сыылка на наш элемент \"р\" в разметке\n// const refs = {\n//   notification: document.querySelector('.js-alert'),\n// };\n\n// // Вешаем слушатель событий:\n// refs.notification.addEventListener('click', onNotificationClick);\n\n// // При запуске скрипта автоматически вызывается функция чтобы нотификация показывалась сразу:\n// showNotification();\n\n// // Пропишем функции функции:\n\n// function onNotificationClick() {\n//   hideNotification();\n// }\n\n// // Два метода:\n\n// // 1. Добавляем класс is-visible:\n// function showNotification() {\n//   refs.notification.classList.add('is-visible');\n// }\n\n// // 2. Убираем класс is-visible:\n// function hideNotification() {\n//   refs.notification.classList.remove('is-visible');\n// }\n\n// Немного перепишем наш код:\n// Добавляем в код константу, которой присвоим значение в мсек для отложенной функции: \n// const NOTIFICATION_DELAY = 3000;\n// // Введем глобальную переменную, для того чтобы использовать её при добавлении кода, который будет очищать наш планировщик,\n// // в том случае если пользователь сам нажмет на нотификацию и отложенную функцию скрытия нотификации через 3 сек, не нужно\n// // будет больше использовать:\n// let timeoutId = null; // изначально указываем null, т.к. если мы просто запишем let timeoutId, то будет считаться, что мы\n// // её не объявили.\n\n// // Сыылка на наш элемент \"р\" в разметке\n// const refs = {\n//   notification: document.querySelector('.js-alert'),\n// };\n\n// // Вешаем слушатель событий:\n// refs.notification.addEventListener('click', onNotificationClick);\n\n// // При запуске скрипта автоматически вызывается функция чтобы нотификация показывалась сразу:\n// showNotification();\n\n// // Пропишем функции функции:\n\n// // Скрываем нотификацию при срабатывании слушателя событий, т.е. при клике пользователем на нотификацию:\n// // function onNotificationClick() {\n// //   hideNotification();\n// // }\n// // Немного расширим функцию, добавив функцию очишения по id нашей отложенной функции(скрытия нотификатора).Функция\n// // срабатывает (очищает наш планировщик) в том случае если пользователь сам кликнул на нотификацию чтобы убрать её \n\n// function onNotificationClick() {\n//   hideNotification();\n//   clearTimeout(timeoutId);\n// }\n\n\n// // Два метода:\n// // 1. Добавляем класс is-visible. Расширим нашу функцию, добавив в неё таймаут для закрытия нотификации через заданное\n// // кол-во времени:\n\n// function showNotification() {\n//   refs.notification.classList.add('is-visible');\n// // т.е. прямо во время вызова функции showNotification() мы планируем вызов нашего setTimeout, через 3 сек\n// //   setTimeout(() => {\n// //     console.log('Закрываем алерт автоматически чтобы не висел')\n// // // и просто внутри этой отложенной функции вызываем нашу функцию hideNotification()\n// //     hideNotification();\n// //   }, NOTIFICATION_DELAY);\n  \n//   // немного перепишем нашу функцию присвоив ей Id чтобы по этому айди можно было бы снять с планировщика нашу функцию:\n//     timeoutId = setTimeout(() => {\n//     console.log('Закрываем алерт автоматически чтобы не висел')\n//     hideNotification();\n//   }, NOTIFICATION_DELAY);\n\n// }\n\n// // 2. Убираем класс is-visible:\n// function hideNotification() {\n//   refs.notification.classList.remove('is-visible');\n// }\n\n\n// Оригинальный код:\n\nconst NOTIFICATION_DELAY = 3000;\nlet timeoutId = null;\n\n// Сыылка на наш элемент \"р\" в разметке\nconst refs = {\n  notification: document.querySelector('.js-alert'),\n};\n\n// Вешаем слушатель событий:\nrefs.notification.addEventListener('click', onNotificationClick);\n\nshowNotification();\n\n/*\n * Функции\n */\nfunction onNotificationClick() {\n  hideNotification();\n  clearTimeout(timeoutId);\n}\n\nfunction showNotification() {\n  refs.notification.classList.add('is-visible');\n\n  timeoutId = setTimeout(() => {\n    console.log('Закрываем алерт автоматически чтобы не висел');\n    hideNotification();\n  }, NOTIFICATION_DELAY);\n}\n\nfunction hideNotification() {\n  refs.notification.classList.remove('is-visible');\n}"]}