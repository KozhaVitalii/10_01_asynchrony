import '../css/common.css';

// Работа с датами в JS очень проблематичная из - за разных часовых поясов, практически всегда используется какая то стороння
// библиотека, если речь не идёт о том чтобы просто посчитать время какое то или таймер написать, как в последующих примерах.
// На реальных проектах лучше всего [Библиотека date-fns](https://date-fns.org/)

/*
 - Создание
 - Unix-время - используется для часов
 - Методы
 - Разница времени
 - Date.now()
*/

// Разберем несколько самых простых концепций:

// Создание времени:
// const date = new Date(); // встроенный в js конструктор (класс)
// console.log(date);
// console.dir(date); // можем увидеть кучу методов объекта

// // Есть куча методов, к примеру:
// console.log(date.getDay()); // где понедельник 1 и далее до 7
// console.log(date.getMonth()); // где январь 0 и далее до 12

// console.log(date.getTime()); // вот в таком формате, т.е. в формате Unix-время. Отсчет в секундах от 1 января 1970 00:00
// Если указать так:
// const date5 = new Date(1000);
// console.log(date5); // 1000 это мсек или 1 сек

// Чтобы посчитать разницу во времени:


const date1 = new Date(); 
console.log('date1', date1);

setTimeout(() => {
  const date2 = new Date();

  console.log('date1', date1);
  console.log('date2', date2);

  console.log(date2 - date1);
}, 3000);

// Можно ещё и так:

const date3 = new Date().getTime(); 

setTimeout(() => {
  const date4 = new Date().getTime();

  console.log('date3', date3);
  console.log('date4', date4);

  console.log(date4 - date3);
}, 3000);

// Проблема такого подхода в том, что для таких элементарных записей создаются целые объекты Date.now(), а таких обращений
// ко времени у нас может быть очень много, соответственно получается что мы забъем память множеством объектов и если
// далее к этим объектам нет обращений, то сборщик мусора почистит пямять. Короче это может ударить по производительности.

// В итоге если нам необходимо просто получить значение времени как число, для этого есть статический метод Date.now(), этот
// метод не создает экземпляр, он просто возвращает текущее значение времени в мсек:

const date5 = Date.now(); 
console.log('date5', date5);

setTimeout(() => {
  const date6 = Date.now();

  console.log('date5', date5);
  console.log('date6', date6);

  console.log(date6 - date5);
}, 3000);

// Разницы в результате никакого, но это очень сильно облегчает память